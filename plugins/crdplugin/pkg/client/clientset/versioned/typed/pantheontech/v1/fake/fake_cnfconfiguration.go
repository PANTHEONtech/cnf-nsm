/*
 * Copyright (c) 2019 PANTHEON.tech s.r.o. All rights reserved.
 *
 * CNF-NSM License. For licensing terms please contact sales@pantheon.tech.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	pantheontechv1 "go.cdnf.io/cnf-nsm/plugins/crdplugin/pkg/apis/pantheontech/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCNFConfigurations implements CNFConfigurationInterface
type FakeCNFConfigurations struct {
	Fake *FakePantheonV1
	ns   string
}

var cnfconfigurationsResource = schema.GroupVersionResource{Group: "pantheon.tech", Version: "v1", Resource: "cnfconfigurations"}

var cnfconfigurationsKind = schema.GroupVersionKind{Group: "pantheon.tech", Version: "v1", Kind: "CNFConfiguration"}

// Get takes name of the cNFConfiguration, and returns the corresponding cNFConfiguration object, and an error if there is any.
func (c *FakeCNFConfigurations) Get(name string, options v1.GetOptions) (result *pantheontechv1.CNFConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(cnfconfigurationsResource, c.ns, name), &pantheontechv1.CNFConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*pantheontechv1.CNFConfiguration), err
}

// List takes label and field selectors, and returns the list of CNFConfigurations that match those selectors.
func (c *FakeCNFConfigurations) List(opts v1.ListOptions) (result *pantheontechv1.CNFConfigurationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(cnfconfigurationsResource, cnfconfigurationsKind, c.ns, opts), &pantheontechv1.CNFConfigurationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &pantheontechv1.CNFConfigurationList{ListMeta: obj.(*pantheontechv1.CNFConfigurationList).ListMeta}
	for _, item := range obj.(*pantheontechv1.CNFConfigurationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cNFConfigurations.
func (c *FakeCNFConfigurations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(cnfconfigurationsResource, c.ns, opts))

}

// Create takes the representation of a cNFConfiguration and creates it.  Returns the server's representation of the cNFConfiguration, and an error, if there is any.
func (c *FakeCNFConfigurations) Create(cNFConfiguration *pantheontechv1.CNFConfiguration) (result *pantheontechv1.CNFConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(cnfconfigurationsResource, c.ns, cNFConfiguration), &pantheontechv1.CNFConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*pantheontechv1.CNFConfiguration), err
}

// Update takes the representation of a cNFConfiguration and updates it. Returns the server's representation of the cNFConfiguration, and an error, if there is any.
func (c *FakeCNFConfigurations) Update(cNFConfiguration *pantheontechv1.CNFConfiguration) (result *pantheontechv1.CNFConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(cnfconfigurationsResource, c.ns, cNFConfiguration), &pantheontechv1.CNFConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*pantheontechv1.CNFConfiguration), err
}

// Delete takes name of the cNFConfiguration and deletes it. Returns an error if one occurs.
func (c *FakeCNFConfigurations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(cnfconfigurationsResource, c.ns, name), &pantheontechv1.CNFConfiguration{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCNFConfigurations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(cnfconfigurationsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &pantheontechv1.CNFConfigurationList{})
	return err
}

// Patch applies the patch and returns the patched cNFConfiguration.
func (c *FakeCNFConfigurations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *pantheontechv1.CNFConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(cnfconfigurationsResource, c.ns, name, pt, data, subresources...), &pantheontechv1.CNFConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*pantheontechv1.CNFConfiguration), err
}
