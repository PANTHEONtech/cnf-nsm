/*
 * Copyright (c) 2019 PANTHEON.tech s.r.o. All rights reserved.
 *
 * CNF-NSM License. For licensing terms please contact sales@pantheon.tech.
 */

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	time "time"

	pantheontechv1 "go.cdnf.io/cnf-nsm/plugins/crdplugin/pkg/apis/pantheontech/v1"
	versioned "go.cdnf.io/cnf-nsm/plugins/crdplugin/pkg/client/clientset/versioned"
	internalinterfaces "go.cdnf.io/cnf-nsm/plugins/crdplugin/pkg/client/informers/externalversions/internalinterfaces"
	v1 "go.cdnf.io/cnf-nsm/plugins/crdplugin/pkg/client/listers/pantheontech/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// CNFConfigurationInformer provides access to a shared informer and lister for
// CNFConfigurations.
type CNFConfigurationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.CNFConfigurationLister
}

type cNFConfigurationInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewCNFConfigurationInformer constructs a new informer for CNFConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCNFConfigurationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredCNFConfigurationInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredCNFConfigurationInformer constructs a new informer for CNFConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCNFConfigurationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PantheonV1().CNFConfigurations(namespace).List(options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PantheonV1().CNFConfigurations(namespace).Watch(options)
			},
		},
		&pantheontechv1.CNFConfiguration{},
		resyncPeriod,
		indexers,
	)
}

func (f *cNFConfigurationInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredCNFConfigurationInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *cNFConfigurationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&pantheontechv1.CNFConfiguration{}, f.defaultInformer)
}

func (f *cNFConfigurationInformer) Lister() v1.CNFConfigurationLister {
	return v1.NewCNFConfigurationLister(f.Informer().GetIndexer())
}
